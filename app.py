# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S1j7zjPjyk2pFZKi9WhoXVB-DwPdHoQ_
"""

from flask import Flask, request, jsonify, render_template
import joblib
import pandas as pd
import os

app = Flask(__name__)

# Load model and handle cases where feature names are missing
model_data = joblib.load('disaster_model.pkl')

if isinstance(model_data, tuple):
    model, feature_names = model_data  # Correctly unpack model and feature names
else:
    model = model_data
    feature_names = ['magnitude', 'depth', 'latitude', 'longitude']  # Default feature names

# Routes for rendering frontend pages
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/earthquake')
def earthquake():
    return render_template('earthquake.html')

@app.route('/flood')
def flood():
    return render_template('flood.html')

@app.route('/tsunami')
def tsunami():
    return render_template('tsunami.html')

@app.route('/report_page')
def report_page():
    return render_template('report.html')

@app.route('/emergency_contacts_page')
def emergency_contacts_page():
    return render_template('emergency_contacts.html')

# Prediction API
@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    magnitude = data.get('magnitude', 0)
    depth = data.get('depth', 0)
    latitude = data.get('latitude', 0)
    longitude = data.get('longitude', 0)

    # Ensure the feature names match those used during training
    features = pd.DataFrame([[magnitude, depth, latitude, longitude]], columns=feature_names)
    prediction = model.predict(features)
    probability = model.predict_proba(features)

    return jsonify({
        'disaster_type': prediction[0],
        'will_occur': 'Yes' if prediction[0] in ['earthquake', 'flood', 'tsunami'] else 'No',
        'probability_score': probability[0].max() * 100
    })

# Report Issue API
@app.route('/report', methods=['POST'])
def report():
    report_data = request.form
    username = report_data.get('username')
    report_text = report_data.get('report_text')
    image = request.files.get('image')

    if image:
        image_path = os.path.join('uploads', image.filename)
        image.save(image_path)

    return jsonify({'status': 'Report submitted successfully', 'username': username})

# Emergency Contacts API
@app.route('/emergency_contacts', methods=['GET'])
def emergency_contacts():
    contacts = {
        "Fire Department": "911",
        "Police": "911",
        "Ambulance": "911",
        "Disaster Management": "12345"
    }
    return jsonify(contacts)

if __name__ == '__main__':
    app.run(debug=True)